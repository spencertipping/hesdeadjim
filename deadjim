#!/bin/bash
# My monitoring script; you would probably want to rewrite the site-specific
# stuff below.

set -euo pipefail

start_time=`date +%s`

cd "$(dirname "$0")"
git pull >&/dev/null

outfile=$1

exec >"$outfile.tmp"

for thing in ok info warning problem; do
  eval "$thing() { echo \"<div class='$thing'>\$1</div>\"; }"
done

disk_check() {
  local name=$1
  local limit=$2
  local bad_deadness=$3
  local good_deadness=$4
  local df_output=$5

  local free=`echo "$df_output" | tail -n1 | awk '{print $4}'`
  if (( free < limit )); then
    $bad_deadness "$name has $free MB free (below limit of $limit)"
  else
    $good_deadness "$name has $free MB free"
  fi
}

loadavg_check() {
  local name=$1
  local limit=$2
  local howbad=$3
  local proc_loadavg=$4

  local load_avg=`echo "$proc_loadavg" | awk '{print $1}'`
  if (( ${load_avg%.*} > ${limit%.*} )); then
    $howbad "$name has 1-minute load average $load_avg (limit is $limit)"
  else
    ok "$name has 1-minute load average $load_avg"
  fi
}

host_up_check() {
  local name=$1
  local ip=$2
  local howbad=$3
  local loadavg_limit=${4:-4}

  ping -c 2 -q $ip > /dev/null || { $howbad "$name is offline"; return; }
  ssh $ip :                    || { $howbad "$name SSH is down"; return; }

  disk_check "$name root FS" 512 problem info "`ssh $ip df -m /`"
  loadavg_check $name $loadavg_limit problem "`ssh $ip cat /proc/loadavg`"
}

ping_check() {
  local name=$1
  local ip=$2
  local howbad=$3

  if ping -c 2 -q $ip > /dev/null; then
    ok "$name is connected"
  else
    $howbad "$name is offline"
  fi
}

echo "<div id='rundate'>`date +%s`</div>"

host_up_check rorschach  10.35.0.2 problem 48
host_up_check reykjavik  10.35.0.3 problem 16
host_up_check rho        10.35.0.4 problem 4
host_up_check rockhopper 10.35.0.5 info    48     # not always on

# Check torrent server
if ! curl 10.35.0.3:8280 >&/dev/null; then
  problem "reykjavik torrent server appears to be down"
else
  ok "reykjavik torrent server is running"
fi

# Check gitlab server
if ! curl 10.35.0.3:8180 >&/dev/null; then
  problem "reykjavik gitlab appears to be down"
else
  ok "reykjavik gitlab is running"
fi

gitlab_backup_stat=`stat -t /mnt/v1/backups/reykjavik-srv-backup.tar`
gitlab_backup_size=`echo "$gitlab_backup_stat" | awk '{print $2}'`
gitlab_backup_modtime=`echo "$gitlab_backup_stat" | awk '{print $13}'`

(( gitlab_backup_size > 4096*1048576 )) \
  || problem "gitlab backup is too small ($((gitlab_backup_size / 1024)) KB)"

gitlab_backup_seconds=$((start_time - gitlab_backup_modtime))
if (( gitlab_backup_seconds > 3600 + 1800 )); then
  problem "gitlab backup is too old: ${gitlab_backup_seconds}s (limit is 5400s)"
else
  ok "gitlab backup is ${gitlab_backup_seconds}s"
fi

# Check RAID6 on rho
ssh 10.35.0.4 'cat /proc/mdstat' | egrep -q UUUUUUUUUUUU \
  || problem "rho RAID6 is degraded or down"

# Make sure /mnt/v1 is mounted and writable
if ! [[ -d /mnt/v1/st ]]; then
  problem "/mnt/v1 is offline"
elif ! touch /mnt/v1/st/deadjim; then
  problem "/mnt/v1 isn't writable"
else
  ok "/mnt/v1 is online + writable"
fi

# Shared volumes
# 4TB usage margin on /mnt/v1
# 1TB usage margins on /mnt/t9 and /mnt/t3
disk_check "/mnt/v1" $((4096 * 1024)) problem info "`df -m /mnt/v1`"
disk_check "reykjavik /mnt/t9" 1048576 problem info "`ssh 10.35.0.3 df -m /mnt/t9`"
disk_check "reykjavik /mnt/t3" 1048576 problem info "`ssh 10.35.0.3 df -m /mnt/t3`"

# VPN clients
ping_check "VPN iniidae"      10.35.1.4  warning
ping_check "VPN iris"         10.35.1.6  warning
ping_check "VPN lily"         10.35.1.8  warning
ping_check "VPN xhosacetus"   10.35.0.10 warning
ping_check "VPN xenorophidae" 10.35.0.12 warning

# ISP status
ping_check "DSL modem"              192.168.0.1 problem
ping_check "Public DNS (primary)"   8.8.8.8     problem
ping_check "Public DNS (secondary)" 8.8.4.4     problem

# Website status
ping_check "spencertipping.com" spencertipping.com problem

ip=`curl spencertipping.com/ip.php 2>/dev/null`
if ! egrep -q '[0-9]+\.[0-9]+\.' <<<"$ip"; then
  problem "spencertipping.com failed to report our IP: $ip"
else
  ok "WAN IP is $ip"
fi

# Port forwarding status
# Look for bogus SSH logins within the last ten minutes.
last_ssh_invalid=`./ni /var/log/auth.log r/Invalid/ \
                       r+1p'my ($y, $m) = tep Ym => time;
                            my $log_t = tpe $y, $m, /\d+/g;
                            int time() - $log_t'`

if (( last_ssh_invalid > 600 )); then
  problem "SSH port forwarding may not be working ($last_ssh_invalid seconds since last invalid attempt)"
else
  ok "SSH port forwarding is working as of $last_ssh_invalid seconds ago"
fi

end_time=`date +%s`

if (( end_time - start_time > 45 )); then
  problem "deadjim script took $((end_time - start_time)) seconds"
else
  ok "deadjim script completed in $((end_time - start_time)) seconds"
fi

mv "$outfile.tmp" "$outfile"
